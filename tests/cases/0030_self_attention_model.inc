#include "../../include/direct_space/graph.hpp"
#include "../../include/direct_space/node.hpp"
#include "../../include/direct_space/computation_table.hpp"
#include "../../include/direct_space/allocator.hpp"
#include "../../include/direct_space/engine.hpp"
#include "../../include/direct_space/stream.hpp"
#include "../../include/utility/wheels/cached_allocator.hpp"
#include "../../include/direct_space/session.hpp"
#include "../../include/direct_space/device.hpp"
#include "../../include/direct_space/tensor.hpp"
#include "../../include/utility/wheels/view.hpp"
#include "../../include/direct_space/layer.hpp"
#include "../../include/direct_space/model.hpp"

TEST_CASE( "self-attention-model-30", "[self-attention-model-30]" )
{

    spdlog::info( "\nTest case of 30 started.\n" );

    std::this_thread::sleep_for( std::chrono::seconds( 1 ) );

    using namespace nnl;
    auto& sess = get_default_session<default_engine_type>();
    sess.clean();


    std::int64_t const n_seq = 3;
    std::int64_t const n_embd = 5;

    auto input = make_tensor<default_engine_type>( {n_seq, n_embd}, "float32", "tensor_input" );
    auto w_p = make_tensor<default_engine_type>( {n_embd, n_embd}, "float32", "tensor_w_p" );
    auto w_q = make_tensor<default_engine_type>( {n_embd, n_embd}, "float32", "tensor_w_q" );
    auto w_k = make_tensor<default_engine_type>( {n_embd, n_embd}, "float32", "tensor_w_k" );
    auto w_v = make_tensor<default_engine_type>( {n_embd, n_embd}, "float32", "tensor_w_v" );
    auto b_p = make_tensor<default_engine_type>( {n_embd, }, "float32", "tensor_b_p" );
    auto b_q = make_tensor<default_engine_type>( {n_embd, }, "float32", "tensor_b_q" );
    auto b_k = make_tensor<default_engine_type>( {n_embd, }, "float32", "tensor_b_k" );
    auto b_v = make_tensor<default_engine_type>( {n_embd, }, "float32", "tensor_b_v" );
    auto gt = make_tensor<default_engine_type>( {n_seq, n_embd}, "float32", "tensor_gt" );



    // shape is (3, 15)
    [[maybe_unused]] float d_sa_x0[]=
    {
    	0.550375937214617,	0.1622700097199928,	-2.183939255065076,	-1.6096330343915675,	-0.20999162989311126,	2.623615203829272,
    	-2.1320328762522878,	-2.9561263925949026,	1.4665544942212436,	2.1294958495443668,	-0.7239820554118996,	-1.2392519904846842,
    	0.7479570331572163,	-0.6667627379333823,	1.7052076659893158,	-0.48616372197959146,	1.7909785730343766,	-3.1997684784257934,
    	-1.3612543900682215,	2.0236454237990316,	1.114692593775298,	1.9064826791666707,	-1.5692487738015422,	-1.9086777685058747,
    	3.51012709115443,	-0.24194761867364684,	1.7801150544669342,	-1.4536863098469008,	0.9087594963726127,	0.26665432069672523,
    	-0.35000824641466044,	-3.6117999806826475,	-0.0035810247636927084,	-0.22040512012537275,	-0.3441679114311185,	0.9449477268683806,
    	-2.5703984885351754,	0.37920639078144636,	2.008207870037549,	0.9986450584030682,	1.6768363750676158,	-1.9608750029741382,
    	1.7538527330905305,	-0.3409750868009791,	-1.4698631754753317,
    };

    // shape is (3, 5)
    [[maybe_unused]] float d_sa_q[]=
    {
    	0.550375937214617,	0.1622700097199928,	-2.183939255065076,	-1.6096330343915675,	-0.20999162989311126,	-0.48616372197959146,
    	1.7909785730343766,	-3.1997684784257934,	-1.3612543900682215,	2.0236454237990316,	-0.35000824641466044,	-3.6117999806826475,
    	-0.0035810247636927084,	-0.22040512012537275,	-0.3441679114311185,
    };

    // shape is (3, 5)
    [[maybe_unused]] float d_sa_k[]=
    {
    	2.623615203829272,	-2.1320328762522878,	-2.9561263925949026,	1.4665544942212436,	2.1294958495443668,	1.114692593775298,
    	1.9064826791666707,	-1.5692487738015422,	-1.9086777685058747,	3.51012709115443,	0.9449477268683806,	-2.5703984885351754,
    	0.37920639078144636,	2.008207870037549,	0.9986450584030682,
    };

    // shape is (3, 5)
    [[maybe_unused]] float d_sa_v[]=
    {
    	-0.7239820554118996,	-1.2392519904846842,	0.7479570331572163,	-0.6667627379333823,	1.7052076659893158,	-0.24194761867364684,
    	1.7801150544669342,	-1.4536863098469008,	0.9087594963726127,	0.26665432069672523,	1.6768363750676158,	-1.9608750029741382,
    	1.7538527330905305,	-0.3409750868009791,	-1.4698631754753317,
    };

    // shape is (3, 3)
    [[maybe_unused]] float attention_query_product[]=
    {
    	4.746219287936803,	6.685182421144921,	-4.167370650560327,	6.677979105755679,	17.595227905786203,	-6.989078853958299,
    	5.736635047911986,	-8.05775694207755,	8.165346886083459,
    };

    // shape is (3, 3)
    [[maybe_unused]] float attention_scaled_mask[]=
    {
    	2.122573792789468,	-9999999997.010296,	-10000000001.863705,	2.986483046558591,	7.8688251353878425,	-10000000003.12561,
    	2.5655011858477925,	-3.603538453731247,	3.651654139429769,
    };

    // shape is (3, 3)
    [[maybe_unused]] float attention_softmax[]=
    {
    	1.0,	0.0,	0.0,	0.007522229170876457,	0.9924777708291236,	0.0,
    	0.2522101726913553,	0.0005279377599792033,	0.7472618895486653,
    };

    // shape is (3, 5)
    [[maybe_unused]] float attention_projection[]=
    {
    	-0.7239820554118996,	-1.2392519904846842,	0.7479570331572163,	-0.6667627379333823,	1.7052076659893158,	-0.24557359217504632,
    	1.7574026836038161,	-1.4371250440682892,	0.8969080570623518,	0.2774754486345471,	1.0703125455922489,	-1.776899328465087,
    	1.498462223923483,	-0.4224822644773843,	-0.6681612370851523,
    };

    // shape is (3, 5)
    [[maybe_unused]] float d_sa_x[]=
    {
    	-0.7239820554118996,	-1.2392519904846842,	0.7479570331572163,	-0.6667627379333823,	1.7052076659893158,	-0.24557359217504632,
    	1.7574026836038161,	-1.4371250440682892,	0.8969080570623518,	0.2774754486345471,	1.0703125455922489,	-1.776899328465087,
    	1.498462223923483,	-0.4224822644773843,	-0.6681612370851523,
    };

    // shape is (3, 5)
    [[maybe_unused]] float dinput[]=
    {
    	-0.712390662050588,	0.753766378659703,	-0.044503078338053455,	0.45181233874578974,	1.3451017084510097,	0.5323378882945463,
    	1.3501878997225267,	0.8612113741693206,	1.4786857374358966,	-1.0453771305385342,	-0.7889890249515489,	-1.261605945319069,
    	0.5628467852810314,	-0.24332625188556253,	0.9137407048596775,
    };

    // shape is (3, 5)
    [[maybe_unused]] float dgt[]=
    {
    	1.3730362622591705,	-1.7680615172990195,	-3.5748029867222755,	4.771509756037002,	-0.12064186135218868,	-2.0623183536876506,
    	4.51295708221217,	0.9224572880782522,	1.6854250216883713,	-2.7587280515759103,	0.08801562458592233,	-6.489704423489043,
    	-1.522481811965294,	-4.286863134854372,	2.6761324002939184,
    };

    // shape is (5, 5)
    [[maybe_unused]] float dw_p[]=
    {
    	-2.0068032318797444,	-2.5227307281519558,	-2.4651979461996087,	-3.051683558858883,	-0.17298482802271142,	-2.548728049763362,
    	-0.7785814686188188,	-2.215689766349332,	-0.9442496781989107,	-3.6684089758617304,	-2.681595743235433,	-3.8278029903518536,
    	-3.1184079979888746,	-0.9745965625039826,	-3.293094091353266,	-1.7480956596212618,	0.06918829333542309,	0.6462455303403127,
    	0.7725782080667352,	-0.6546765756225592,	-1.4262577853799248,	-0.9447168649796196,	-3.14610554262595,	1.494800437437545,
    	-1.5868829293012867,
    };

    // shape is (5,)
    [[maybe_unused]] float db_p[]=
    {
    	0.03384948212788946,	-0.03922914543379239,	0.022730906779640334,	0.08711987705638341,	-0.059419021422341345,
    };

    // shape is (5, 5)
    [[maybe_unused]] float dw_q[]=
    {
    	0.31735092273633597,	0.12730328020698067,	2.1503829673811126,	0.6062886568962988,	-0.026771649986440726,	0.49087183250951594,
    	1.8927422187767202,	-0.6209797023155086,	-0.4537523812416193,	0.21745165945019368,	-0.08165155616424355,	-0.9802743185258672,
    	-0.002389025600514556,	-0.2324258720274623,	0.7109747948581455,	-0.5231642148972904,	-0.48137141579474935,	-1.9241594490929896,
    	-0.757453225587536,	0.45348104026746144,	0.46565797200403236,	-0.7209996734353815,	0.5622617060581323,	-0.3148580761325759,
    	-0.42989708186880404,
    };

    // shape is (5, 5)
    [[maybe_unused]] float dw_k[]=
    {
    	-0.9841607817725814,	1.190705272505982,	0.9528306110451948,	-1.0871815907509188,	-0.1452113325860197,	0.5143288551447859,
    	0.3972413264075336,	-1.5128451152607716,	-0.7640339696578627,	0.1012697856437548,	0.4531586132388156,	-0.33267577528589565,
    	-0.38445768500357647,	-0.530327407582726,	1.3503059959308692,	0.9223441482568703,	-0.20734969827652708,	-0.37591996120915105,
    	0.6398839732802036,	2.0536932362953815,	0.8149954430712237,	-1.185418809153406,	-0.7686270207784495,	0.7291654706806434,
    	0.7659110492252689,
    };

    // shape is (5, 5)
    [[maybe_unused]] float dw_v[]=
    {
    	0.23785783828501061,	-1.639093411201915,	-0.27813451650877447,	1.3992384201681904,	-1.6151079632521659,	-0.31726597100271015,
    	1.1383330474921514,	-0.3221236569774085,	-0.37011607810475444,	1.8496125662057936,	2.0152208250443837,	-0.057532387873538586,
    	0.5646542880869975,	0.35953229551797367,	-0.511965094194221,	-0.928335225810039,	-0.7746600331288077,	-0.4371456556814915,
    	0.5479183096073379,	-0.8541429534648363,	0.20780005335113885,	-2.187115273247333,	0.7219650574076287,	0.3487505938690223,
    	-0.3386182541020083,
    };

    // shape is (5,)
    [[maybe_unused]] float db_q[]=
    {
    	0.01283205577236221,	-0.030043557279793714,	-0.07099940742890665,	-0.08029618481659467,	0.012036283663216144,
    };

    // shape is (5,)
    [[maybe_unused]] float db_k[]=
    {
    	0.042013178012612756,	0.09017420652522909,	0.0496102664252375,	-0.0255507975151764,	0.05169546111964074,
    };

    // shape is (5,)
    [[maybe_unused]] float db_v[]=
    {
    	-0.08578529750751838,	0.024369073790195678,	0.04414280612462895,	-0.0916382761757541,	-0.02095163634727351,
    };










    w_q.import_from( dw_q );

    w_k.import_from( dw_k );

    w_v.import_from( dw_v );

    b_q.import_from( db_q );

    b_k.import_from( db_k );

    b_v.import_from( db_v );

    w_p.import_from( dw_p );

    b_p.import_from( db_p );

    gt.import_from( dgt );

    input.import_from( dinput );

    auto input_layer = Input( "InputLayer" );
    auto output_layer = SelfAttention( w_q, b_q, w_k, b_k, w_v, b_v, w_p, b_p, "Attention_Layer_model_30" )( input_layer );
    auto m = model( input_layer, output_layer );
    auto outputs = m.predict( input );
    auto output = outputs[0];

    output.save_txt( "./output.txt" );
    gt.save_txt( "./gt.txt" );

    auto mat = view_2d{ reinterpret_cast<float*>( gt.data() ), static_cast<std::uint64_t>(n_seq), static_cast<std::uint64_t>(n_embd) };
    auto nat = view_2d{ reinterpret_cast<float*>( output.data() ), static_cast<std::uint64_t>(n_seq), static_cast<std::uint64_t>(n_embd) };
    for ( auto r : range( n_seq ) )
        for ( auto c : range( n_embd ) )
        {
            if ( std::abs(mat[r][c]-nat[r][c]) > 1.0e-2 )
            {
                spdlog::error( "gt[{}][{}]={}, pred[{}][{}]={}", r, c, mat[r][c], r, c, nat[r][c] );
            }
            REQUIRE( std::abs(mat[r][c]-nat[r][c]) < 1.0e-2 );
        }

}

